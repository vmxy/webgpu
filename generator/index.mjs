import fs from "fs";
import https from "https";
import nunjucks from "nunjucks";

import pkg from "../package.json" assert { type: "json" };

import {
  warn,
  getPlatform,
  normalizeDawnPath
} from "./utils.mjs";

import generateAST from "./generators/ast.mjs";
import generateGyp from "./generators/gyp.mjs";
import generateIndex from "./generators/index.mjs";
import generateMemoryLayouts from "./generators/memoryLayouts.mjs";
import generateDescriptorDecoder from "./generators/descriptorDecoder.mjs";

const DAWN_PATH = normalizeDawnPath(fs.readFileSync(pkg.config.DAWN_PATH, "utf-8"));

const GEN_FILE_NOTICE = `/*
 * MACHINE GENERATED, DO NOT EDIT
 * GENERATED BY ${pkg.name} v${pkg.version}
 */
`;

const dawnVersion = process.env.npm_config_dawnversion;
if (!dawnVersion) throw `No Dawn version --dawnversion specified!`;

// dst write paths
const baseGeneratePath = pkg.config.GEN_OUT_DIR;
const generateVersionPath = `${baseGeneratePath}/${dawnVersion}`;
const generatePath = `${generateVersionPath}/${getPlatform()}`;
const generateSrcPath = `${generatePath}/src`;
const bypassBuild = !!process.env.npm_config_bypass_build;

// enables js interface minifcation
const enableMinification = false;

// indicating if it's necessary to include memorylayouts in the build
const includeMemoryLayouts = false /*!fs.existsSync(`${generatePath}/memoryLayouts.json`)*/;

function writeGeneratedFile(path, text, includeNotice = true) {
  if (typeof text !== "string") throw new TypeError(`Expected 'string' type for parameter 'text'`);
  let source = null;
  try {
    source = fs.readFileSync(path, "utf-8");
  } catch(e) { };
  // append notice
  if (includeNotice) text = GEN_FILE_NOTICE + text;
  if (source !== text) {
    fs.writeFileSync(path, text, "utf-8");
  }
};

async function generateBindings(version, enableMinification, includeMemoryLayouts) {
  // copy dawn.json specification from dawn folder into into specification folder
  fs.copyFileSync(
    DAWN_PATH + "/dawn.json",
    pkg.config.SPEC_DIR + `/${version}.json`
  );
  let JSONspecification = fs.readFileSync(pkg.config.SPEC_DIR + `/${version}.json`, "utf-8");
  let fakePlatform = process.env.npm_config_fake_platform;
  // let the user know when he uses a fake platform
  if (fakePlatform) {
    console.log(`Fake platform enabled!`);
    console.log(`Fake platform: '${fakePlatform}' - Real platform: '${process.platform}'`);
  }
  if (!enableMinification) console.log(`Code minification is disabled!`);
  if (includeMemoryLayouts) console.log(`Memory layouts are not inlined yet.`);
  // reserve dst write paths
  {
    // generated/
    if (!fs.existsSync(baseGeneratePath)) fs.mkdirSync(baseGeneratePath);
    // generated/version/
    if (!fs.existsSync(generateVersionPath)) fs.mkdirSync(generateVersionPath);
    // generated/version/platform/
    if (!fs.existsSync(generatePath)) fs.mkdirSync(generatePath);
    // generated/version/platform/src/
    if (!fs.existsSync(generateSrcPath)) fs.mkdirSync(generateSrcPath);
  }
  console.log(`Generating bindings for ${version}...`);
  let ast = generateAST(JSON.parse(JSONspecification));
  // generate AST
  {
    let out = JSON.stringify(ast, null, 2);
    // .json
    writeGeneratedFile(`${generatePath}/ast.json`, out, false);
  }
  // generate gyp
  {
    let out = generateGyp(ast);
    // .gyp
    writeGeneratedFile(`${generatePath}/binding.gyp`, out.gyp, false);
  }
  // generate index
  {
    let out = generateIndex(ast, includeMemoryLayouts);
    // .h
    writeGeneratedFile(`${generatePath}/src/index.h`, out.header);
    // .cpp
    writeGeneratedFile(`${generatePath}/src/index.cpp`, out.source);
  }
  // generate memorylayouts
  {
    let out = generateMemoryLayouts(ast);
    // .h
    writeGeneratedFile(`${generatePath}/src/memoryLayouts.h`, out.header);
  }
  // generate descriptor decoder
  {
    let out = generateDescriptorDecoder(ast);
    // .h
    writeGeneratedFile(`${generatePath}/src/DescriptorDecoder.h`, out.header);
    // .cpp
    writeGeneratedFile(`${generatePath}/src/DescriptorDecoder.cpp`, out.source);
  }
  console.log(`Successfully generated bindings!`);
};

if (bypassBuild) {
  process.stderr.write(`Skipping generation..\n`);
} else {
  generateBindings(
    dawnVersion,
    enableMinification,
    includeMemoryLayouts
  );
}
